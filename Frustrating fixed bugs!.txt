16bit/bootsect/bootsect.asm:
forgot to initialize LBA Packet to 0s! Caused bochs to say:
int13_harddisk: can't use 64bits LBA

16bit/osldr/int21.inc: function Int21
  The function tested a wrong register for an error,
  exiting randomly!

32bit/kernel/fat.c: function read_sector
  Wrong pointer arithmetic! *((uint*)start+offset)
  instead of *(uint*)(start+offset)

32bit/kernel/kenrel.c: interrupts
Interrupts were enabled after setting up the IDT. It worked fine like that
for a while, but later, only in bochs, a triple fault started occuring
on the instruction after sti. This wasn't obvious, because it was when I
started testing file streams. I think this problem was also occuring earlier,
and I just thought it had to do with a high ch0 PIT frequency? I may have moved
the PIC initialization code right after the IDT init code and just didn't
test it in bochs for a while. It works fine now, so this is my guess for 
what the problem was.

4-23-08
32bit/kernel/fat.c: functions pop_cluster, push_cluster: Memory allocation bug
Wouldn't update clusterstacksize, so would always allocate insufficient memory
(clusterstacksize*2*sizeof(unsigned) is always 32, because clusterstacksize itself was never updated)
Took a few days to track down!

32bit/kernel/kernel.c: function page_map
Just remember to invalidate new mapped page tables, along with the new page.

32bit/kernel/kernel.c: function kfindrange
I changed the initialization routines to non-static to make it easy to trace the bug in
bochs, because the compiler doesn't optimize nonstatic functions a certain way. The
bug was then easy to find: kfindrange looked through the page tables without checking
if they existed first.

32bit/osldr/init.inc: function load_kernel
when later modifying this code to calculate the number of pages, I forgot all
about my ES register being based at 0x0, so I forgot to use ES! Segmentation...

32bit/kernel/kernel.c: function page_unmap
Tried to free a physical page using its logical address (when freeing page tables)...

8-1-08
I just recently started on my OS again. 
I got back from my dad's, finished my disk imaging tool, and modified my code
to work with FAT32. I found out after a few days that the pages
weren't being invalidated correctly, because I was getting the wrong data from the
wrong page. I found out that my invlpg() function used inline asm incorrectly.
It was: asm volatile ("invlpg %0"::"m"(pg)); I realized this was incorrect because
it would generate code like:
mov ss:[bp-32], ebx
invlpg ss:[bp-32]
which, for this instruction, the actual contents of the memory operand passed is meaningless.
The old inline asm would always just invalidate the page that contained the variable
holding the address of the page we really want to invalidate.
I knew this but it wasn't apparent. Things seemed to be working for a while so I didn't
realize it. The fixed function generates:
mov ss:[bp-32], eax
...
mov ebx, ss:[bp-32]
invlpg (ebx)

kernel/disk.c:
This took a long time to solve: The disk driver always worked fine but it didn't work
on my computer. I traced it down to a typo: (lba >> 16)*0xFF instead of (lba >> 16)&0xFF!